// -*- C++ -*-
//===----------------------------- timer ---------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//  Based on N4332
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL_TIMER
#define _LIBCPP_EXPERIMENTAL_TIMER

/* 
    io_service synopsis

#include <chrono>

namespace std {
  namespace experimental {
    inline namespace network_v1 {

      template<class Clock> struct wait_traits;

      template<class Clock, class WaitTraits = wait_traits<Clock>>
        class basic_waitable_timer;

      typedef basic_waitable_timer<chrono::system_clock> system_timer;
      typedef basic_waitable_timer<chrono::steady_clock> steady_timer;
      typedef basic_waitable_timer<chrono::high_resolution_clock> high_resolution_timer;


	  template<class Clock, class WaitTraits = wait_traits<Clock>>
	  class basic_waitable_timer
	  {
	  public:
		// types:

		typedef io_context::executor_type executor_type;
		typedef Clock clock_type;
		typedef typename clock_type::duration duration;
		typedef typename clock_type::time_point time_point;
		typedef WaitTraits traits_type;

		// construct / copy / destroy:

		explicit basic_waitable_timer(io_context& ctx);
		basic_waitable_timer(io_context& ctx, const time_point& t);
		basic_waitable_timer(io_context& ctx, const duration& d);
		basic_waitable_timer(const basic_waitable_timer&) = delete;
		basic_waitable_timer(basic_waitable_timer&& rhs);

		~basic_waitable_timer();

		basic_waitable_timer& operator=(const basic_waitable_timer&) = delete;
		basic_waitable_timer& operator=(basic_waitable_timer&& rhs);

		// basic_waitable_timer operations:

		executor_type get_executor() noexcept;

		size_t cancel();
		size_t cancel_one();

		time_point expiry() const;
		size_t expires_at(const time_point& t);
		size_t expires_after(const duration& d);

		void wait();
		void wait(error_code& ec);

		template<class CompletionToken>
		  DEDUCED async_wait(CompletionToken&& token);
	  };

    } // inline namespace network_v1
  } // namespace experimental
} // namespace std

*/


#include <experimental/__net_config>
#include <experimental/io_context>
#include <chrono>

#endif
